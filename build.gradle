buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: "maven-publish"

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}
sourceSets.main.resources { srcDir 'src/generated/resources' }
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            workingDirectory project.file('run')
            taskName 'runClient'
            // main = 'net.minecraft.launchwrapper.Launch'
            // args '--tweakClass net.minecraftforge.fml.common.launcher.FMLTweaker'
            sourceSets.main.resources { srcDir 'src/generated/resources' }
            jvmArgs = ["-Xmx4G"]
            // classpath += configurations.forge
        }

        server {
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }

    mavenCentral()
    maven {
        url = "https://jitpack.io"
    }

    maven {
        url = "https://raw.githubusercontent.com/kotlin-graphics/mary/master"
    }

    flatDir(dirs: 'libs')
}

configurations {
    shade
    implementation.extendsFrom shade

    embed
    implementation.extendsFrom(embed)
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:3.0.106")
    implementation 'org.joml:joml:1.10.1'
    // implementation "io.github.spair:imgui-java-app:1.86.12"
    shade "org.mozilla:rhino:1.7.15"

    // shade files("libs/JSHelper   -1.0.jar")

    implementation("kotlin.graphics:uno:0.7.21")
    implementation('com.github.kotlin-graphics.imgui:imgui:v1.89.7-1') {
        exclude group: "org.lwjgl"
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    // from configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    finalizedBy 'reobfJar'
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

jar.finalizedBy('reobf')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}